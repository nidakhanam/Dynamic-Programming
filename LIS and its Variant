/*
    Company Tags  : Microsoft
    Leetcode Link : https://leetcode.com/problems/longest-increasing-subsequence/
*/
************************************************************ JAVA ************************************************************
//Rec+Memoization

class Solution {
    static int n=0;
    public static int t[][] = new int[2501][2501];
    public int lengthOfLIS(int[] nums) {
        n = nums.length;
        for(int i = 0; i < 2501; i++){
      for(int j = 0; j < 2501; j++){
        t[i][j] = -1;
        }
    }
        return lis(nums,0,-1);
    }
    private int lis(int[] nums,int i,int p){
        if(i>=n) return 0;
        if(p!=-1 && t[i][p]!=-1) return t[i][p];
        int take=0;
        if(p==-1 || nums[i]>nums[p]){
            take = 1+lis(nums,i+1,i);
        }
        int skip = lis(nums,i+1,p);
        if(p>=0) t[i][p] = Math.max(take,skip);
        return Math.max(take,skip);
    }
}

//Bottom Up
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;

        int[] t = new int[n];
        Arrays.fill(t,1);
    
        int maxLIS = 1;
        
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i]) {
                    t[i] = Math.max(t[i], t[j] + 1);
                    maxLIS = Math.max(maxLIS, t[i]);
                }
            }
        }

        return maxLIS;
    }
}


//Approacj-4 (Using concept of Patience Sorting (O(nlogn))
//T.C : O(nlogn)
//S.C : O(n)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        List<Integer> sorted = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            /*
                Why lower bound?
                We want an increasing subsequence, and hence
                we want to eliminate the duplicates as well.
                lower_bound returns the index of "next greater or equal to."
            */
            int index = binarySearch(sorted, nums[i]);

            if (index == sorted.size())
                sorted.add(nums[i]); // greatest: so insert it
            else
                sorted.set(index, nums[i]); // replace
        }

        return sorted.size();
    }

    private int binarySearch(List<Integer> sorted, int target) {
        int left = 0, right = sorted.size();
        int result = sorted.size();
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            
            if (sorted.get(mid) < target) {
                left = mid + 1;
            } else {
                result = mid;
                right = mid;
            }
        }
        return result;
    }
}

	
//Approach-5 (Using same code of Leetcode-2926(Maximum Balanced Subsequence Sum) 
//T.C : O(nlogn)
//S.C : O(n)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        TreeMap<Integer, Integer> mp = new TreeMap<>();
        int ans = 0;

        for (int i = 0; i < n; i++) {
            int len = 1;

            Integer key = mp.lowerKey(nums[i]);
            if (key != null) {
                len += mp.get(key);
            }

            mp.put(nums[i], Math.max(mp.getOrDefault(nums[i], 0), len));

            key = mp.higherKey(nums[i]);
            while (key != null && mp.get(key) <= len) {
                mp.remove(key);
                key = mp.higherKey(nums[i]);
            }

            ans = Math.max(ans, len);
        }

        return ans;
    }
}
